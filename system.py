# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'wang（3）.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
import sys

import PyQt5
import torch.hub
import os
import cv2
import torch
import time
from PIL import Image
import numpy as np
import openpyxl as op
import logging
from PyQt5.QtGui import QIcon
from unet import UNet
import torch.nn.functional as F
import pymysql
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QDir
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from utils import data_loading


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

def predict_img(net, full_img, scale_factor=1, out_threshold=0.5):
    net.eval()
    img = torch.from_numpy(data_loading.BasicDataset.preprocess(None, full_img, scale_factor, is_mask=False))
    img = img.unsqueeze(0)
    img = img.to(device=device, dtype=torch.float32)

    with torch.no_grad():
        output = net(img).cpu()
        output = F.interpolate(output, (full_img.size[1], full_img.size[0]), mode='bilinear')
        if net.n_classes > 1:
            mask = output.argmax(dim=1)
        else:
            mask = torch.sigmoid(output) > out_threshold

    return mask[0].long().squeeze().numpy()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("font: 14pt \"Agency FB\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setMinimumSize(QtCore.QSize(761, 150))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_2.setStyleSheet("QFrame#frame_2{\n"
"    background-color:#009999;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.frame_32 = QtWidgets.QFrame(self.frame_2)
        self.frame_32.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_32.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_32.setObjectName("frame_32")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_32)
        self.horizontalLayout_2.setContentsMargins(0, 10, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.frame_32)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setPointSize(42)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel#label{\n"
"    font: 42pt \"华文行楷\";\n"
"}\n"
"")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.verticalLayout_9.addWidget(self.frame_32)
        self.frame_33 = QtWidgets.QFrame(self.frame_2)
        self.frame_33.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_33.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_33.setObjectName("frame_33")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout(self.frame_33)
        self.horizontalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_27.setSpacing(0)
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        spacerItem = QtWidgets.QSpacerItem(500, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_27.addItem(spacerItem)
        self.label_23 = QtWidgets.QLabel(self.frame_33)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_23.sizePolicy().hasHeightForWidth())
        self.label_23.setSizePolicy(sizePolicy)
        self.label_23.setStyleSheet("QLabel#label_23{\n"
"    font: 22pt \"华文行楷\";\n"
"}")
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_27.addWidget(self.label_23)
        self.verticalLayout_9.addWidget(self.frame_33)
        self.verticalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(761, 80))
        self.frame_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setMinimumSize(QtCore.QSize(200, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_4.setStyleSheet("QFrame#frame_4{\n"
"    background-color:#66CCCC;\n"
"    border:none;\n"
"}\n"
"QPushButton{\n"
"    border:none;\n"
"    font: 16pt \"Agency FB\";\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: transparent;\n"
"    padding: 10px;\n"
"    border-left: 3px solid rgb(255, 214, 65);\n"
"}\n"
"QPushButton:selected {\n"
"    background-color: transparent;\n"
"    color: black;\n"
"    padding: 10px;\n"
"    border-left: 3px solid rgb(255, 214, 65);\n"
"}\n"
"QPushButton:focus {\n"
"    background-color: transparent;\n"
"    padding: 10px;\n"
"    border-left: 3px solid rgb(255, 214, 65);\n"
"}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.frame_4)
        self.pushButton.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/MainInterface.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_2.setMaximumSize(QtCore.QSize(200, 50))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/imgIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_4.setMaximumSize(QtCore.QSize(200, 50))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/realtimeIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon2)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_5.setMaximumSize(QtCore.QSize(200, 50))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/visualizationIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon3)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.horizontalLayout.addWidget(self.frame_4)
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setStyleSheet("QFrame#frame_5{\n"
"    background-color:rgb(255, 255, 255);\n"
"}")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_5)
        self.stackedWidget.setStyleSheet("QWidget{\n"
"    background-color:#CCFFFF;\n"
"}")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.page)
        self.horizontalLayout_28.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_28.setSpacing(0)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.frame_34 = QtWidgets.QFrame(self.page)
        self.frame_34.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_34.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_34.setObjectName("frame_34")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_34)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_2 = QtWidgets.QLabel(self.frame_34)
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("images/main.jpg"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 0, 0, 1, 1)
        self.horizontalLayout_28.addWidget(self.frame_34)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setMinimumSize(QtCore.QSize(0, 0))
        self.page_2.setObjectName("page_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.page_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame_6 = QtWidgets.QFrame(self.page_2)
        self.frame_6.setMinimumSize(QtCore.QSize(0, 495))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_5.setContentsMargins(30, 0, 30, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_7 = QtWidgets.QFrame(self.frame_6)
        self.frame_7.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_7.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_5.addWidget(self.pushButton_6)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem1)
        self.pushButton_13 = QtWidgets.QPushButton(self.frame_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_13.sizePolicy().hasHeightForWidth())
        self.pushButton_13.setSizePolicy(sizePolicy)
        self.pushButton_13.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontalLayout_5.addWidget(self.pushButton_13)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.verticalLayout_5.addWidget(self.frame_7)
        self.frame_8 = QtWidgets.QFrame(self.frame_6)
        self.frame_8.setMinimumSize(QtCore.QSize(0, 380))
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_8)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(10)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_10 = QtWidgets.QLabel(self.frame_8)
        self.label_10.setMinimumSize(QtCore.QSize(278, 0))
        self.label_10.setMaximumSize(QtCore.QSize(1100, 16777215))
        self.label_10.setStyleSheet("QLabel#label_10{\n"
"    border:1px solid black;\n"
"}\n"
"")
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_4.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.frame_8)
        self.label_11.setMinimumSize(QtCore.QSize(278, 0))
        self.label_11.setMaximumSize(QtCore.QSize(1100, 16777215))
        self.label_11.setStyleSheet("QLabel#label_11{\n"
"    border:1px solid black;\n"
"}")
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_4.addWidget(self.label_11)
        self.groupBox = QtWidgets.QGroupBox(self.frame_8)
        self.groupBox.setMinimumSize(QtCore.QSize(300, 395))
        self.groupBox.setMaximumSize(QtCore.QSize(500, 16777215))
        self.groupBox.setStyleSheet("QGroupBox{\n"
"    border:1px solid black;\n"
"    margin-top: 0ex;\n"
"}\n"
"QGroupBox::title{\n"
"    subcontrol-origin:margin;\n"
"    left: 10px;\n"
"}")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_6.setContentsMargins(0, 25, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_10 = QtWidgets.QFrame(self.groupBox)
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_6.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.frame_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_6.addWidget(self.label_3)
        spacerItem3 = QtWidgets.QSpacerItem(41, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.lineEdit = QtWidgets.QLineEdit(self.frame_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_6.addWidget(self.lineEdit)
        self.verticalLayout_6.addWidget(self.frame_10)
        self.frame_11 = QtWidgets.QFrame(self.groupBox)
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_7.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_7 = QtWidgets.QLabel(self.frame_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_7.addWidget(self.label_7)
        spacerItem4 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem4)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_7.addWidget(self.lineEdit_2)
        self.verticalLayout_6.addWidget(self.frame_11)
        self.frame_12 = QtWidgets.QFrame(self.groupBox)
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_8.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_8 = QtWidgets.QLabel(self.frame_12)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_8.addWidget(self.label_8)
        spacerItem5 = QtWidgets.QSpacerItem(38, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem5)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_12)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_3.sizePolicy().hasHeightForWidth())
        self.lineEdit_3.setSizePolicy(sizePolicy)
        self.lineEdit_3.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_8.addWidget(self.lineEdit_3)
        self.verticalLayout_6.addWidget(self.frame_12)
        self.frame_13 = QtWidgets.QFrame(self.groupBox)
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_13)
        self.horizontalLayout_9.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_9 = QtWidgets.QLabel(self.frame_13)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_9.addWidget(self.label_9)
        spacerItem6 = QtWidgets.QSpacerItem(27, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem6)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_13)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_4.sizePolicy().hasHeightForWidth())
        self.lineEdit_4.setSizePolicy(sizePolicy)
        self.lineEdit_4.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_9.addWidget(self.lineEdit_4)
        self.verticalLayout_6.addWidget(self.frame_13)
        self.frame_25 = QtWidgets.QFrame(self.groupBox)
        self.frame_25.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_25.setObjectName("frame_25")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.frame_25)
        self.horizontalLayout_20.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_20.setSpacing(0)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.label_17 = QtWidgets.QLabel(self.frame_25)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_20.addWidget(self.label_17)
        spacerItem7 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_20.addItem(spacerItem7)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.frame_25)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_9.sizePolicy().hasHeightForWidth())
        self.lineEdit_9.setSizePolicy(sizePolicy)
        self.lineEdit_9.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.horizontalLayout_20.addWidget(self.lineEdit_9)
        self.verticalLayout_6.addWidget(self.frame_25)
        self.frame_18 = QtWidgets.QFrame(self.groupBox)
        self.frame_18.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_18.setObjectName("frame_18")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.frame_18)
        self.horizontalLayout_18.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_18.setSpacing(0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.label_18 = QtWidgets.QLabel(self.frame_18)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_18.addWidget(self.label_18)
        spacerItem8 = QtWidgets.QSpacerItem(1, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_18.addItem(spacerItem8)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.frame_18)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_10.sizePolicy().hasHeightForWidth())
        self.lineEdit_10.setSizePolicy(sizePolicy)
        self.lineEdit_10.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.horizontalLayout_18.addWidget(self.lineEdit_10)
        self.verticalLayout_6.addWidget(self.frame_18)
        self.frame_28 = QtWidgets.QFrame(self.groupBox)
        self.frame_28.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_28.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_28.setObjectName("frame_28")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.frame_28)
        self.horizontalLayout_23.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_23.setSpacing(0)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_19 = QtWidgets.QLabel(self.frame_28)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_23.addWidget(self.label_19)
        spacerItem9 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem9)
        self.lineEdit_11 = QtWidgets.QLineEdit(self.frame_28)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_11.sizePolicy().hasHeightForWidth())
        self.lineEdit_11.setSizePolicy(sizePolicy)
        self.lineEdit_11.setMaximumSize(QtCore.QSize(200, 40))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.horizontalLayout_23.addWidget(self.lineEdit_11)
        self.verticalLayout_6.addWidget(self.frame_28)
        self.horizontalLayout_4.addWidget(self.groupBox)
        self.verticalLayout_5.addWidget(self.frame_8)
        self.frame_9 = QtWidgets.QFrame(self.frame_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_9.sizePolicy().hasHeightForWidth())
        self.frame_9.setSizePolicy(sizePolicy)
        self.frame_9.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_9.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_9)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_14 = QtWidgets.QFrame(self.frame_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_14.sizePolicy().hasHeightForWidth())
        self.frame_14.setSizePolicy(sizePolicy)
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_14)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_14)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_10.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_14)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_10.addWidget(self.pushButton_8)
        self.horizontalLayout_3.addWidget(self.frame_14)
        self.frame_15 = QtWidgets.QFrame(self.frame_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_15.sizePolicy().hasHeightForWidth())
        self.frame_15.setSizePolicy(sizePolicy)
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_15)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame_15)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_11.addWidget(self.pushButton_9)
        self.pushButton_10 = QtWidgets.QPushButton(self.frame_15)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())
        self.pushButton_10.setSizePolicy(sizePolicy)
        self.pushButton_10.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_11.addWidget(self.pushButton_10)
        self.horizontalLayout_3.addWidget(self.frame_15)
        self.frame_16 = QtWidgets.QFrame(self.frame_9)
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_16)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.pushButton_11 = QtWidgets.QPushButton(self.frame_16)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_11.sizePolicy().hasHeightForWidth())
        self.pushButton_11.setSizePolicy(sizePolicy)
        self.pushButton_11.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout_12.addWidget(self.pushButton_11)
        self.pushButton_12 = QtWidgets.QPushButton(self.frame_16)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_12.sizePolicy().hasHeightForWidth())
        self.pushButton_12.setSizePolicy(sizePolicy)
        self.pushButton_12.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout_12.addWidget(self.pushButton_12)
        self.horizontalLayout_3.addWidget(self.frame_16)
        self.verticalLayout_5.addWidget(self.frame_9)
        self.gridLayout_2.addWidget(self.frame_6, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.page_2)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.page_4)
        self.horizontalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_29.setSpacing(0)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.frame_35 = QtWidgets.QFrame(self.page_4)
        self.frame_35.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_35.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_35.setObjectName("frame_35")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_35)
        self.verticalLayout_10.setContentsMargins(30, 0, 30, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.frame_36 = QtWidgets.QFrame(self.frame_35)
        self.frame_36.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_36.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_36.setObjectName("frame_36")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.frame_36)
        self.horizontalLayout_30.setContentsMargins(0, 50, 0, 0)
        self.horizontalLayout_30.setSpacing(10)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.frame_39 = QtWidgets.QFrame(self.frame_36)
        self.frame_39.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_39.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_39.setObjectName("frame_39")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.frame_39)
        self.horizontalLayout_31.setContentsMargins(0, -1, 0, 0)
        self.horizontalLayout_31.setSpacing(10)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.label_5 = QtWidgets.QLabel(self.frame_39)
        self.label_5.setMaximumSize(QtCore.QSize(880, 16777215))
        self.label_5.setStyleSheet("QLabel#label_5{\n"
"    border:1px solid black;\n"
"}")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_31.addWidget(self.label_5)
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame_39)
        self.groupBox_3.setMinimumSize(QtCore.QSize(300, 395))
        self.groupBox_3.setMaximumSize(QtCore.QSize(720, 16777215))
        self.groupBox_3.setStyleSheet("QGroupBox{\n"
"    border:1px solid black;\n"
"    margin-top: 0ex;\n"
"}\n"
"QGroupBox::title{\n"
"    subcontrol-origin:margin;\n"
"    left: 10px;\n"
"}")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_11.setContentsMargins(0, 25, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.frame_40 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_40.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_40.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_40.setObjectName("frame_40")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.frame_40)
        self.horizontalLayout_32.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_32.setSpacing(0)
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.label_6 = QtWidgets.QLabel(self.frame_40)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_32.addWidget(self.label_6)
        spacerItem10 = QtWidgets.QSpacerItem(42, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_32.addItem(spacerItem10)
        self.lineEdit_15 = QtWidgets.QLineEdit(self.frame_40)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_15.sizePolicy().hasHeightForWidth())
        self.lineEdit_15.setSizePolicy(sizePolicy)
        self.lineEdit_15.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.horizontalLayout_32.addWidget(self.lineEdit_15)
        self.verticalLayout_11.addWidget(self.frame_40)
        self.frame_41 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_41.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_41.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_41.setObjectName("frame_41")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.frame_41)
        self.horizontalLayout_33.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_33.setSpacing(0)
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.label_13 = QtWidgets.QLabel(self.frame_41)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_33.addWidget(self.label_13)
        spacerItem11 = QtWidgets.QSpacerItem(8, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_33.addItem(spacerItem11)
        self.lineEdit_16 = QtWidgets.QLineEdit(self.frame_41)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_16.sizePolicy().hasHeightForWidth())
        self.lineEdit_16.setSizePolicy(sizePolicy)
        self.lineEdit_16.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.horizontalLayout_33.addWidget(self.lineEdit_16)
        self.verticalLayout_11.addWidget(self.frame_41)
        self.frame_42 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_42.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_42.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_42.setObjectName("frame_42")
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout(self.frame_42)
        self.horizontalLayout_34.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_34.setSpacing(0)
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.label_24 = QtWidgets.QLabel(self.frame_42)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_24.sizePolicy().hasHeightForWidth())
        self.label_24.setSizePolicy(sizePolicy)
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_34.addWidget(self.label_24)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_34.addItem(spacerItem12)
        self.lineEdit_17 = QtWidgets.QLineEdit(self.frame_42)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_17.sizePolicy().hasHeightForWidth())
        self.lineEdit_17.setSizePolicy(sizePolicy)
        self.lineEdit_17.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.horizontalLayout_34.addWidget(self.lineEdit_17)
        self.verticalLayout_11.addWidget(self.frame_42)
        self.frame_43 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_43.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_43.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_43.setObjectName("frame_43")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.frame_43)
        self.horizontalLayout_35.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_35.setSpacing(0)
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.label_25 = QtWidgets.QLabel(self.frame_43)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_35.addWidget(self.label_25)
        spacerItem13 = QtWidgets.QSpacerItem(25, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_35.addItem(spacerItem13)
        self.lineEdit_18 = QtWidgets.QLineEdit(self.frame_43)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_18.sizePolicy().hasHeightForWidth())
        self.lineEdit_18.setSizePolicy(sizePolicy)
        self.lineEdit_18.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.horizontalLayout_35.addWidget(self.lineEdit_18)
        self.verticalLayout_11.addWidget(self.frame_43)
        self.frame_44 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_44.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_44.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_44.setObjectName("frame_44")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.frame_44)
        self.horizontalLayout_36.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_36.setSpacing(0)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.label_26 = QtWidgets.QLabel(self.frame_44)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_26.sizePolicy().hasHeightForWidth())
        self.label_26.setSizePolicy(sizePolicy)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_36.addWidget(self.label_26)
        spacerItem14 = QtWidgets.QSpacerItem(7, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_36.addItem(spacerItem14)
        self.lineEdit_19 = QtWidgets.QLineEdit(self.frame_44)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_19.sizePolicy().hasHeightForWidth())
        self.lineEdit_19.setSizePolicy(sizePolicy)
        self.lineEdit_19.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.horizontalLayout_36.addWidget(self.lineEdit_19)
        self.verticalLayout_11.addWidget(self.frame_44)
        self.frame_45 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_45.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_45.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_45.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_45.setObjectName("frame_45")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.frame_45)
        self.horizontalLayout_37.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_37.setSpacing(0)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.label_27 = QtWidgets.QLabel(self.frame_45)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setObjectName("label_27")
        self.horizontalLayout_37.addWidget(self.label_27)
        spacerItem15 = QtWidgets.QSpacerItem(0, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_37.addItem(spacerItem15)
        self.lineEdit_20 = QtWidgets.QLineEdit(self.frame_45)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_20.sizePolicy().hasHeightForWidth())
        self.lineEdit_20.setSizePolicy(sizePolicy)
        self.lineEdit_20.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.horizontalLayout_37.addWidget(self.lineEdit_20)
        self.verticalLayout_11.addWidget(self.frame_45)
        self.frame_46 = QtWidgets.QFrame(self.groupBox_3)
        self.frame_46.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_46.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_46.setObjectName("frame_46")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.frame_46)
        self.horizontalLayout_38.setContentsMargins(25, 0, 25, 0)
        self.horizontalLayout_38.setSpacing(0)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.label_28 = QtWidgets.QLabel(self.frame_46)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_38.addWidget(self.label_28)
        spacerItem16 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_38.addItem(spacerItem16)
        self.lineEdit_21 = QtWidgets.QLineEdit(self.frame_46)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_21.sizePolicy().hasHeightForWidth())
        self.lineEdit_21.setSizePolicy(sizePolicy)
        self.lineEdit_21.setMaximumSize(QtCore.QSize(300, 40))
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.horizontalLayout_38.addWidget(self.lineEdit_21)
        self.verticalLayout_11.addWidget(self.frame_46)
        self.horizontalLayout_31.addWidget(self.groupBox_3)
        self.horizontalLayout_30.addWidget(self.frame_39)
        self.verticalLayout_10.addWidget(self.frame_36)
        self.frame_37 = QtWidgets.QFrame(self.frame_35)
        self.frame_37.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_37.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_37.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_37.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_37.setObjectName("frame_37")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.frame_37)
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.pushButton_14 = QtWidgets.QPushButton(self.frame_37)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_14.sizePolicy().hasHeightForWidth())
        self.pushButton_14.setSizePolicy(sizePolicy)
        self.pushButton_14.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout_39.addWidget(self.pushButton_14)
        self.pushButton_20 = QtWidgets.QPushButton(self.frame_37)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_20.sizePolicy().hasHeightForWidth())
        self.pushButton_20.setSizePolicy(sizePolicy)
        self.pushButton_20.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_20.setObjectName("pushButton_20")
        self.horizontalLayout_39.addWidget(self.pushButton_20)
        self.pushButton_21 = QtWidgets.QPushButton(self.frame_37)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_21.sizePolicy().hasHeightForWidth())
        self.pushButton_21.setSizePolicy(sizePolicy)
        self.pushButton_21.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_21.setObjectName("pushButton_21")
        self.horizontalLayout_39.addWidget(self.pushButton_21)
        self.verticalLayout_10.addWidget(self.frame_37)
        self.horizontalLayout_29.addWidget(self.frame_35)
        self.stackedWidget.addWidget(self.page_4)
        self.verticalLayout_4.addWidget(self.stackedWidget)
        self.horizontalLayout.addWidget(self.frame_5)
        self.verticalLayout.addWidget(self.frame_3)
        self.verticalLayout_3.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 28))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "基于YOLOv5和U-Net算法的绿植病害识别与检测系统"))
        self.label.setText(_translate("MainWindow", "基于YOLOv5和U-Net算法的绿植病害识别与检测系统"))
        self.label_23.setText(_translate("MainWindow", "——新一代信息技术产业学院(山东职业学院)"))
        self.pushButton.setText(_translate("MainWindow", "主界面"))
        self.pushButton_2.setText(_translate("MainWindow", "图像检测"))
        self.pushButton_4.setText(_translate("MainWindow", "实时监测"))
        self.pushButton_5.setText(_translate("MainWindow", "数据可视化"))
        self.pushButton_6.setText(_translate("MainWindow", "载入图片"))
        self.pushButton_13.setText(_translate("MainWindow", "载入文件"))
        self.label_10.setText(_translate("MainWindow", "\t\t\t\t此处是载入图片"))
        self.label_11.setText(_translate("MainWindow", "\t\t\t\t此处是标记图片"))
        self.groupBox.setTitle(_translate("MainWindow", "检测结果"))
        self.label_3.setText(_translate("MainWindow", "缺陷类别"))
        self.label_7.setText(_translate("MainWindow", "缺陷数量(个)"))
        self.label_8.setText(_translate("MainWindow", "正确率(%)"))
        self.label_9.setText(_translate("MainWindow", "检测时间(s)"))
        self.label_17.setText(_translate("MainWindow", "平均周长(mm)"))
        self.label_18.setText(_translate("MainWindow", "平均面积(mm^2)"))
        self.label_19.setText(_translate("MainWindow", "总面积(mm^2)"))
        self.pushButton_7.setText(_translate("MainWindow", "上一页 "))
        self.pushButton_8.setText(_translate("MainWindow", "下一页"))
        self.pushButton_9.setText(_translate("MainWindow", "开始检测"))
        self.pushButton_10.setText(_translate("MainWindow", "保存图片"))
        self.pushButton_11.setText(_translate("MainWindow", "写入表格"))
        self.pushButton_12.setText(_translate("MainWindow", "退出"))
        self.label_5.setText(_translate("MainWindow", "\t\t\t\t\t\t\t\t实时监测"))
        self.groupBox_3.setTitle(_translate("MainWindow", "检测结果"))
        self.label_6.setText(_translate("MainWindow", "缺陷类别"))
        self.label_13.setText(_translate("MainWindow", "缺陷数量(个)"))
        self.label_24.setText(_translate("MainWindow", "正确率(%)"))
        self.label_25.setText(_translate("MainWindow", "检测时间(s)"))
        self.label_26.setText(_translate("MainWindow", "平均周长(mm)"))
        self.label_27.setText(_translate("MainWindow", "平均面积(mm^2)"))
        self.label_28.setText(_translate("MainWindow", "总面积(mm^2)"))
        self.pushButton_14.setText(_translate("MainWindow", "开始检测"))
        self.pushButton_20.setText(_translate("MainWindow", "拍照"))
        self.pushButton_21.setText(_translate("MainWindow", "停止检测"))

        self.pushButton.clicked.connect(self.click_pushButton)
        self.pushButton_2.clicked.connect(self.click_pushButton_2)
        self.pushButton_4.clicked.connect(self.click_pushButton_4)
        self.pushButton_5.clicked.connect(self.click_pushButton_5)

    def click_pushButton(self):
        self.stackedWidget.setCurrentIndex(0)

    def click_pushButton_2(self):
        self.stackedWidget.setCurrentIndex(1)

    def click_pushButton_4(self):
        self.stackedWidget.setCurrentIndex(2)

    def click_pushButton_5(self):
        self.stackedWidget.setCurrentIndex(4)


class MainWindow(PyQt5.QtWidgets.QMainWindow):
    def __init__(self):
            super(MainWindow, self).__init__()
            self.ui = Ui_MainWindow()
            self.ui.setupUi(self)
            self.is_camera_on = False  # 摄像头默认为关闭状态

            self.load_models()  # 在init方法中加载模型

            self.image_paths = [
                    r'TestImages/Test(1).JPG',
                    r'TestImages/Test(2).JPG'
            ]

            self.current_image_index = 0

            self.ui.pushButton_5.clicked.connect(self.run_py_file)  # 数据可视化
            # 图片检测
            self.ui.pushButton_6.clicked.connect(self.upload_image)
            self.ui.pushButton_7.clicked.connect(self.previous_page)
            self.ui.pushButton_8.clicked.connect(self.next_page)
            self.ui.pushButton_9.clicked.connect(self.start_detection)
            self.ui.pushButton_10.clicked.connect(self.save_image)
            self.ui.pushButton_11.clicked.connect(self.deposit_the_form)
            self.ui.pushButton_12.clicked.connect(self.go_back)
            self.ui.pushButton_13.clicked.connect(self.upload_folder)
            # 实时监测
            self.ui.pushButton_14.clicked.connect(self.realtime_detection)
            self.ui.pushButton_20.clicked.connect(self.take_photo)
            self.ui.pushButton_21.clicked.connect(self.stop_realtime_detection)

    def load_models(self):
            # 加载yolov5模型
            self.yolov5_model = torch.hub.load(repo_or_dir=r'model/yolov5-master', model='custom',
                                               path=r'model/yolo_best.pt', source='local')

            self.yolov5_model.to(device)

            logging.info(f'Using device {device}')
            print(f'Using device {device}')

            # 加载U-net模型
            self.unet_model = UNet(n_channels=3, n_classes=2, bilinear=False)
            self.unet_model.load_state_dict(
                    torch.load(r'model/U_net_best.pth', map_location=torch.device('cpu')),
                    strict=False)
            self.unet_model.to(device)

    # 图像检测
    # 翻页功能
    def previous_page(self):  # 上一页
            if self.current_image_index > 0:
                    self.current_image_index -= 1
                    self.show_image()

    def next_page(self):  # 下一页
            if self.current_image_index < len(self.image_paths) - 1:
                    self.current_image_index += 1
                    self.show_image()

    def show_image(self):
            img_path = self.image_paths[self.current_image_index]
            img = cv2.imread(img_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img = PyQt5.QtGui.QImage(img.data, img.shape[1], img.shape[0], PyQt5.QtGui.QImage.Format_RGB888)
            pixmap = PyQt5.QtGui.QPixmap.fromImage(img)
            self.ui.label_10.setPixmap(pixmap.scaled(self.ui.label_10.size(), PyQt5.QtCore.Qt.KeepAspectRatio))

    def start_detection(self):  # 开始检测

            labels = ['苹果黑星病', '葡萄黑腐病', '番茄叶斑病']

            img_path = self.image_paths[self.current_image_index]
            img = Image.open(img_path)

            start_time = time.time()

            results = self.yolov5_model(img)

            end_time = time.time()
            detection_time = end_time - start_time

            defect_name = ''
            if len(results.xyxy[0]) > 0:
                    defect_name = labels[int(results.xyxy[0][0][5])]

            mask = predict_img(self.unet_model, img)

            img_np = np.array(img)
            mask_np = np.array(mask, dtype=np.uint8) * 255

            testimg = mask_np

            if testimg.ndim == 2:
                    testimg = cv2.cvtColor(testimg, cv2.COLOR_GRAY2BGR)

            gray = cv2.cvtColor(testimg, cv2.COLOR_BGR2GRAY)

            ret, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

            contours, hierachy = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

            cv2.drawContours(testimg, contours, -1, (0, 0, 255), 1)

            defect_count = len(contours)

            scale_factor = 50 / 256

            area = 0
            perimeter = 0
            average_area = 0
            average_perimeter = 0

            if defect_count > 0:
                    for contour in contours:
                            area += cv2.contourArea(contour)
                            perimeter += cv2.arcLength(contour, True)

                    adjusted_area = area * scale_factor ** 2
                    adjusted_perimeter = perimeter * scale_factor

                    average_area = adjusted_area / defect_count
                    average_perimeter = adjusted_perimeter / defect_count

                    # 对原始图像进行标注
                    # 方法在图像上绘制矩形框表示检测结果
                    img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
                    for result in results.xyxy[0]:
                            x1, y1, x2, y2, conf, cls = result
                            cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

            # 将标注后的图像转换为 QImage，并显示在 label_11 控件上
            marked_img = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
            image = QtGui.QImage(marked_img.data, marked_img.shape[1], marked_img.shape[0],
                                 QtGui.QImage.Format_RGB888)
            pixmap = QtGui.QPixmap.fromImage(image)
            self.ui.label_11.setPixmap(pixmap.scaled(self.ui.label_11.size(), QtCore.Qt.KeepAspectRatio))

            # 准确率
            accuracy = 0
            if defect_name in labels:
                    accuracy = 100
                    self.ui.lineEdit_3.setText("100%")
            self.ui.lineEdit.setText(defect_name)
            self.ui.lineEdit_2.setText(str(defect_count))
            self.ui.lineEdit_4.setText(str(round(detection_time, 2)))
            self.ui.lineEdit_11.setText(str(round(adjusted_area, 2)))
            self.ui.lineEdit_9.setText(str(round(average_perimeter, 2)))
            self.ui.lineEdit_10.setText(str(round(average_area, 2)))
            self.ui.lineEdit_11.setText(str(round(adjusted_area, 2)))

            return defect_name, defect_count, accuracy, detection_time, adjusted_area, average_perimeter, average_area

    def save_image(self):  # 保存图片
            img_path = self.image_paths[self.current_image_index]
            filename = os.path.basename(img_path)  # 获取原始图片文件名

            # 构建保存文件名，使用原始图片文件名作为前缀
            save_dir = './save/savephotos'
            save_filename = f'{os.path.splitext(filename)[0]}_marked.jpg'

            # 将标记后的图像保存到指定位置
            marked_img_path = os.path.join(save_dir, save_filename)
            self.ui.label_11.pixmap().save(marked_img_path)

            PyQt5.QtWidgets.QMessageBox.information(self, '保存成功', f'图片已保存为 {save_filename}',PyQt5.QtWidgets.QMessageBox.Ok)

    def upload_image(self):  # 上传图片
            options = PyQt5.QtWidgets.QFileDialog.Options()
            options |= PyQt5.QtWidgets.QFileDialog.ReadOnly

            file_name, _ = PyQt5.QtWidgets.QFileDialog.getOpenFileName(self, "选择图片", "",
                                                                       "Image Files (*.jpg *.png *.jpeg * JPG);;All Files (*)",
                                                                       options=options)

            if file_name:
                    self.image_paths.append(file_name)
                    self.current_image_index = len(self.image_paths) - 1
                    self.show_image()

    def upload_folder(self):  # 上传文件夹
            options = QFileDialog.Options()
            options |= QFileDialog.ReadOnly
            options |= QFileDialog.ShowDirsOnly

            folder_path = QFileDialog.getExistingDirectory(self, "选择文件夹", options=options)

            if folder_path:
                    image_files = QDir(folder_path).entryList(['*.jpg', '*.png', '*.jpeg', '*.JPG'], QDir.Files)
                    self.image_paths.extend([os.path.join(folder_path, file) for file in image_files])
                    self.current_image_index = 0
                    self.show_image()

                    msg_box = QMessageBox()
                    msg_box.setWindowTitle("开始检测")
                    msg_box.setText("是否需要直接开始检测？")
                    msg_box.addButton(QMessageBox.Yes)
                    msg_box.addButton(QMessageBox.No)

                    reply = msg_box.exec_()
                    if reply == QMessageBox.Yes:
                            self.start_detection_and_save_to_database(folder_path)
                    else:
                            msg_box.close()

    def start_detection_and_save_to_database(self, folder_path):
            conn = pymysql.connect(
                    host='47.93.241.186',
                    user='root',
                    password='123456',
                    database='pyproject',
                    port=3306
            )

            cursor = conn.cursor()

            # 创建表格（如果不存在）
            create_table_query = '''
        CREATE TABLE IF NOT EXISTS images_detection_results (
            id INT AUTO_INCREMENT PRIMARY KEY,
            defect_category VARCHAR(255),
            defect_count INT,
            accuracy FLOAT,
            detection_time FLOAT,
            average_perimeter FLOAT,
            average_area FLOAT,
            total_area FLOAT
        )
        '''
            cursor.execute(create_table_query)

            labels = ['苹果黑星病', '葡萄黑腐病', '番茄叶斑病']
            detections_results = []

            for image_path in self.image_paths:
                    img = Image.open(image_path)

                    start_time = time.time()

                    results = self.yolov5_model(img)

                    end_time = time.time()
                    detection_time = end_time - start_time

                    defect_name = ''
                    if len(results.xyxy[0]) > 0:
                            defect_name = labels[int(results.xyxy[0][0][5])]

                    mask = predict_img(self.unet_model, img)

                    img_np = np.array(img)
                    mask_np = np.array(mask, dtype=np.uint8) * 255

                    testimg = mask_np

                    if testimg.ndim == 2:
                            testimg = cv2.cvtColor(testimg, cv2.COLOR_GRAY2BGR)

                    gray = cv2.cvtColor(testimg, cv2.COLOR_BGR2GRAY)

                    ret, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

                    contours, hierachy = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

                    cv2.drawContours(testimg, contours, -1, (0, 0, 255), 1)

                    defect_count = len(contours)

                    scale_factor = 50 / 256

                    area = 0
                    perimeter = 0
                    average_area = 0
                    average_perimeter = 0

                    if defect_count > 0:
                            for contour in contours:
                                    area += cv2.contourArea(contour)
                                    perimeter += cv2.arcLength(contour, True)

                            adjusted_area = area * scale_factor ** 2
                            adjusted_perimeter = perimeter * scale_factor

                            average_area = adjusted_area / defect_count
                            average_perimeter = adjusted_perimeter / defect_count

                    # 对原始图像进行标注
                    img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
                    for result in results.xyxy[0]:
                            x1, y1, x2, y2, conf, cls = result
                            cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

                    result_dict = {
                            '病害类别': defect_name,
                            '病害数量': defect_count,
                            '准确率': "100" if defect_name in labels else "",
                            '检测耗时（s）': round(detection_time, 2),
                            '平均周长': round(average_perimeter, 2),
                            '平均面积': round(average_area, 2),
                            '总面积': round(adjusted_area, 2)
                    }

                    detections_results.append(result_dict)

            # 批量写入表格
            if os.path.exists("图片批量检测结果.xlsx"):
                    workbook = op.load_workbook("图片批量检测结果.xlsx")
                    worksheet = workbook.active
            else:
                    workbook = op.Workbook()
                    worksheet = workbook.create_sheet(index=0)

                    header = ['病害类别', '病害数量(个)', '准确率(%)', '检测耗时（s）', '平均周长(mm)',
                              '平均面积(mm^2)',
                              '总面积(mm^2)', '图片路径']
                    worksheet.append(header)

            for result_dict in detections_results:
                    row_data = [
                            result_dict['病害类别'],
                            result_dict['病害数量'],
                            result_dict['准确率'],
                            result_dict['检测耗时（s）'],
                            result_dict['平均周长'],
                            result_dict['平均面积'],
                            result_dict['总面积']
                    ]
                    worksheet.append(row_data)

            workbook.save('图片批量检测结果.xlsx')
            print('检测完成，创建表格写入信息成功！')

            # 批量写入数据库
            insert_query = '''
        INSERT INTO images_detection_results (defect_category, defect_count, accuracy, detection_time, average_perimeter, average_area, total_area)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        '''
            values = [(result_dict['病害类别'],
                       result_dict['病害数量'],
                       result_dict['准确率'],
                       result_dict['检测耗时（s）'],
                       result_dict['平均周长'],
                       result_dict['平均面积'],
                       result_dict['总面积']) for result_dict in detections_results]

            cursor.executemany(insert_query, values)


            print('数据已成功插入到MySQL数据库中！')
            # 提交事务并关闭连接
            conn.commit()
            cursor.close()
            conn.close()

            # 录入完毕后给出提示
            tip_box = QMessageBox()
            tip_box.setWindowTitle("检测完成")
            tip_box.setText("数据录入云数据库和表格成功")
            tip_box.addButton(QMessageBox.Yes)

            reply = tip_box.exec_()
            if reply == QMessageBox.Yes:
                    tip_box.close()

    def deposit_the_form(self):
            # 检查文件是否已存在
            if os.path.exists("图片检测结果.xlsx"):
                    workbook = op.load_workbook("图片检测结果.xlsx")
                    worksheet = workbook.active
            else:
                    # 创建workbook
                    workbook = op.Workbook()  # 创建worksheet
                    worksheet = workbook.create_sheet(index=0)
            # 创建头文件
            header = ['病害类别', '病害数量(个)', '准确率(%)', '检测耗时（s）', '平均周长(mm)',
                      '平均面积(mm^2)', '总面积(mm^2)']
            worksheet.append(header)

            defect_name, defect_count, accuracy, detection_time, adjusted_area, average_perimeter, average_area = self.start_detection()

            count = worksheet.max_row + 1  # 从第二行开始
            worksheet.cell(row=count, column=1, value=defect_name)
            worksheet.cell(row=count, column=2, value=defect_count)
            worksheet.cell(row=count, column=3, value=accuracy)
            worksheet.cell(row=count, column=4, value=detection_time)
            worksheet.cell(row=count, column=5, value=average_perimeter)
            worksheet.cell(row=count, column=6, value=average_area)
            worksheet.cell(row=count, column=7, value=adjusted_area)
            # 保存
            workbook.save("图片检测结果.xlsx")
            PyQt5.QtWidgets.QMessageBox.information(self, '写入成功', "写入表格成功",
                                                    PyQt5.QtWidgets.QMessageBox.Ok)

    def go_back(self):  # 退出按钮
            # self.close()
            self.window().close()

    # 实时监测
    def realtime_detection(self):
            # 建立数据库连接
            conn = pymysql.connect(
                    host='47.93.241.186',
                    user='root',
                    password='123456',
                    database='pyproject',
                    port=3306
            )

            cursor = conn.cursor()

            # 创建表格（如果不存在）
            create_table_query = '''
            CREATE TABLE IF NOT EXISTS realtime_detection_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                defect_category VARCHAR(255),
                defect_count INT,
                accuracy FLOAT,
                detection_time FLOAT,
                average_perimeter FLOAT,
                average_area FLOAT,
                total_area FLOAT
            )
        '''
            cursor.execute(create_table_query)

            labels = ['苹果黑星病', '葡萄黑腐病', '番茄叶斑病']

            self.cap = cv2.VideoCapture(1)
            self.is_camera_on = True

            detections_results = []  # 存储检测结果的列表

            while self.is_camera_on:
                    ret, frame = self.cap.read()
                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                    start_time = time.time()
                    results = self.yolov5_model(frame)
                    end_time = time.time()
                    detection_time = end_time - start_time

                    bboxes = results.xyxy[0].cpu().numpy()
                    confs = results.xyxy[0][:, 4].cpu().numpy()
                    classes = results.xyxy[0][:, 5].cpu().numpy().astype(np.int64)

                    defect_count = 0
                    defect_types = []

                    img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

                    mask = predict_img(self.unet_model, img)

                    img_np = np.array(img)
                    mask_np = np.array(mask, dtype=np.uint8) * 255

                    testimg = mask_np
                    if testimg.ndim == 2:
                            testimg = cv2.cvtColor(testimg, cv2.COLOR_GRAY2BGR)

                    gray = cv2.cvtColor(testimg, cv2.COLOR_BGR2GRAY)
                    ret, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

                    contours, hierachy = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                    cv2.drawContours(testimg, contours, -1, (0, 0, 255), 1)
                    defect_count = len(contours)

                    scale_factor = 50 / 256
                    area = 0
                    perimeter = 0
                    average_area = 0
                    average_perimeter = 0
                    adjusted_area = 0
                    accuracy = 0

                    if defect_count > 0:
                            for contour in contours:
                                    area += cv2.contourArea(contour)
                                    perimeter += cv2.arcLength(contour, True)

                            adjusted_area = area * scale_factor ** 2
                            adjusted_perimeter = perimeter * scale_factor

                            average_area = adjusted_area / defect_count
                            average_perimeter = adjusted_perimeter / defect_count

                    self.ui.lineEdit_16.setText(str(len(bboxes)))
                    defect_types.clear()
                    for bbox, conf, cls in zip(bboxes, confs, classes):
                            if conf > 0.5:
                                    if len(bbox) > 4:
                                            bbox = bbox[:4]
                                    x1, y1, x2, y2 = map(int, bbox)
                                    label = labels[cls]
                                    color = (255, 0, 0)
                                    if label == '苹果黑星病':
                                            color = (0, 255, 0)
                                    elif label == '葡萄黑腐病':
                                            color = (0, 0, 255)
                                    elif label == '番茄叶斑病':
                                            color = (255, 255, 0)
                                    cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)

                                    defect_types.append(label)
                                    if label in ['苹果黑星病', '葡萄黑腐病', '番茄叶斑病']:
                                            accuracy = 100
                                            self.ui.lineEdit_17.setText("100%")

                    defect_types_str = '' if len(defect_types) == 0 else defect_types[0]  # 只显示一个缺陷类型
                    self.ui.lineEdit_15.setText(defect_types_str)  # 更新缺陷种类的文本框
                    self.ui.lineEdit_18.setText(str(round(detection_time, 2)))
                    self.ui.lineEdit_19.setText(str(round(average_perimeter, 2)))
                    self.ui.lineEdit_20.setText(str(round(average_area, 2)))
                    self.ui.lineEdit_21.setText(str(round(adjusted_area, 2)))

                    result_dict = {
                            '病害类别': defect_types_str,
                            '病害数量': defect_count,
                            '准确率': accuracy,
                            '检测耗时（s）': round(detection_time, 2),
                            '平均周长': round(average_perimeter, 2),
                            '平均面积': round(average_area, 2),
                            '总面积': round(adjusted_area, 2)
                    }

                    detections_results.append(result_dict)

                    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
                    self.display_frame(frame)

                    PyQt5.QtWidgets.QApplication.processEvents()

            self.cap.release()

            # 保存检测结果到表格
            if accuracy > 0:
                    if os.path.exists("实时检测结果.xlsx"):
                            workbook = op.load_workbook("实时检测结果.xlsx")
                            worksheet = workbook.active
                    else:
                            workbook = op.Workbook()
                            worksheet = workbook.create_sheet(index=0)

                            header = ['病害类别', '病害数量(个)', '准确率(%)', '检测耗时（s）', '平均周长(mm)',
                                      '平均面积(mm^2)', '总面积(mm^2)']
                            worksheet.append(header)

                    for result_dict in detections_results:
                            if result_dict['准确率'] > 0:
                                    row_data = [
                                            result_dict['病害类别'],
                                            result_dict['病害数量'],
                                            result_dict['准确率'],
                                            result_dict['检测耗时（s）'],
                                            result_dict['平均周长'],
                                            result_dict['平均面积'],
                                            result_dict['总面积']
                                    ]
                                    worksheet.append(row_data)

                    workbook.save('实时检测结果.xlsx')
                    print('检测完成，创建表格写入信息成功！')

                    # 保存检测结果到数据库
                    insert_query = '''
                INSERT INTO realtime_detection_results (defect_category, defect_count, accuracy, detection_time, average_perimeter, average_area, total_area)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            '''
                    values = [(result_dict['病害类别'],
                               result_dict['病害数量'],
                               result_dict['准确率'],
                               result_dict['检测耗时（s）'],
                               result_dict['平均周长'],
                               result_dict['平均面积'],
                               result_dict['总面积']) for result_dict in detections_results if
                              result_dict['准确率'] > 0]

                    cursor.executemany(insert_query, values)

                    # 提交事务并关闭连接
                    conn.commit()
                    cursor.close()
                    conn.close()

                    print('数据已成功插入到MySQL数据库中！')

    def stop_realtime_detection(self):  # 停止检测
            self.cap.release()
            self.is_camera_on = False

    def display_frame(self, frame):  # 摄像头打开展示
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image = PyQt5.QtGui.QImage(frame.data, frame.shape[1], frame.shape[0],
                                       PyQt5.QtGui.QImage.Format_RGB888)
            pixmap = PyQt5.QtGui.QPixmap.fromImage(image)

            scaled_pixmap = pixmap.scaled(self.ui.label_5.width(), self.ui.label_5.height(),
                                          PyQt5.QtCore.Qt.KeepAspectRatio)

            self.ui.label_5.setPixmap(scaled_pixmap)

    def take_photo(self):  # 拍照功能
            self.click_count = getattr(self, 'click_count', 0) + 1

            ret, frame = self.cap.read()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            filename = f"Screenshot_{self.click_count}.jpg"
            save_path = os.path.join(r'./save/takephotos', filename)

            cv2.imwrite(save_path, frame)

            PyQt5.QtWidgets.QMessageBox.information(self.ui.centralwidget, "保存成功", "照片已保存",
                                                    PyQt5.QtWidgets.QMessageBox.Ok)

    def run_py_file(self):  # 数据可视化
            # self.window().close()
            import os
            os.system("start python app.py")

if __name__ == "__main__":
        app = PyQt5.QtWidgets.QApplication(sys.argv)
        app.setWindowIcon(QIcon('images/icon.ico'))
        MainWindow = MainWindow()
        MainWindow.show()
        sys.exit(app.exec_())